/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SessionId as PrismaSessionId } from "@prisma/client";

export class SessionIdServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SessionIdCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sessionId.count(args);
  }

  async sessionIds<T extends Prisma.SessionIdFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionIdFindManyArgs>
  ): Promise<PrismaSessionId[]> {
    return this.prisma.sessionId.findMany<Prisma.SessionIdFindManyArgs>(args);
  }
  async sessionId<T extends Prisma.SessionIdFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionIdFindUniqueArgs>
  ): Promise<PrismaSessionId | null> {
    return this.prisma.sessionId.findUnique(args);
  }
  async createSessionId<T extends Prisma.SessionIdCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionIdCreateArgs>
  ): Promise<PrismaSessionId> {
    return this.prisma.sessionId.create<T>(args);
  }
  async updateSessionId<T extends Prisma.SessionIdUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionIdUpdateArgs>
  ): Promise<PrismaSessionId> {
    return this.prisma.sessionId.update<T>(args);
  }
  async deleteSessionId<T extends Prisma.SessionIdDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionIdDeleteArgs>
  ): Promise<PrismaSessionId> {
    return this.prisma.sessionId.delete(args);
  }
}
